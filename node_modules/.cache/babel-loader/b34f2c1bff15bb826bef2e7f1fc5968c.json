{"ast":null,"code":"var _jsxFileName = \"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport useTimer from './useTimer';\nimport './ToDoList.css';\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OurTimer = props => {\n  _s();\n\n  const roomId = props.room;\n  const {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    sendTime\n  } = useTimer(roomId); // useEffect(sendTime(minutes,seconds), [seconds]) adding effect hook to call send time\n  //calls decrement every time start changes\n  //function for adjusting display time\n  //calls time on every re-render\n  //click handlers\n\n  const handleStart = () => sendStart(start);\n\n  const handleWork = () => {\n    if (work === true) {\n      setMinutes(5);\n      setSeconds(0);\n    } else {\n      setMinutes(25);\n      setSeconds(0);\n    }\n\n    sendWork(work);\n  }; //variables for display\n\n\n  let startStatus = start ? 'STOP' : 'START';\n  let workStatus = work ? 'REST' : 'WORK'; //adds zero when seconds gets into single digits\n\n  let secondsDisplay;\n\n  if (seconds < 10) {\n    secondsDisplay = '0' + seconds;\n  } else {\n    secondsDisplay = seconds;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"timerTimer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleStart,\n            children: startStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleWork,\n            children: workStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"timerMargin\",\n          children: minutes + ':' + secondsDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OurTimer, \"9/c+GSG5/Anmy44tNSBw4ZnSS2g=\", false, function () {\n  return [useTimer];\n});\n\n_c = OurTimer;\nexport default OurTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"OurTimer\");","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js"],"names":["React","useState","useEffect","Button","useTimer","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","OurTimer","props","roomId","room","start","sendStart","work","sendWork","minutes","seconds","sendTime","handleStart","handleWork","setMinutes","setSeconds","startStatus","workStatus","secondsDisplay"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,gBAAP;AACA,SAASC,kDAAT,QAAmE,WAAnE;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,MAAM,GAAID,KAAK,CAACE,IAAtB;AACA,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA,IAAnB;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA,OAAnC;AAA4CC,IAAAA,OAA5C;AAAqDC,IAAAA;AAArD,MAAiEZ,QAAQ,CAACI,MAAD,CAA/E,CAF0B,CAK1B;AAGA;AAIA;AAGA;AAGA;;AACA,QAAMS,WAAW,GAAG,MAAMN,SAAS,CAACD,KAAD,CAAnC;;AAEA,QAAMQ,UAAU,GAAG,MAAM;AACvB,QAAIN,IAAI,KAAK,IAAb,EAAkB;AAChBO,MAAAA,UAAU,CAAC,CAAD,CAAV;AACAC,MAAAA,UAAU,CAAC,CAAD,CAAV;AACD,KAHD,MAGO;AACLD,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAC,MAAAA,UAAU,CAAC,CAAD,CAAV;AACD;;AACDP,IAAAA,QAAQ,CAACD,IAAD,CAAR;AACD,GATD,CArB0B,CAgC1B;;;AACA,MAAIS,WAAW,GAAIX,KAAK,GAAG,MAAH,GAAY,OAApC;AACA,MAAIY,UAAU,GAAIV,IAAI,GAAG,MAAH,GAAY,MAAlC,CAlC0B,CAmC1B;;AACA,MAAIW,cAAJ;;AACA,MAAIR,OAAO,GAAG,EAAd,EAAkB;AAChBQ,IAAAA,cAAc,GAAG,MAAIR,OAArB;AACD,GAFD,MAEO;AACLQ,IAAAA,cAAc,GAAGR,OAAjB;AACD;;AAID,sBAEE;AAAA,2BAEI;AAAS,MAAA,SAAS,EAAC,YAAnB;AAAA,6BACE;AAAA,gCACE;AAAK,UAAA,SAAS,EAAG,SAAjB;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,WAAhB;AAA4B,YAAA,OAAO,EAAEE,WAArC;AAAA,sBAAoDI;AAApD;AAAA;AAAA;AAAA;AAAA,kBADF,EAC4E,GAD5E,eAEE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,WAAhB;AAA4B,YAAA,OAAO,EAAGH,UAAtC;AAAA,sBAAoDI;AAApD;AAAA;AAAA;AAAA;AAAA,kBAFF,EAE2E,GAF3E;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA,oBAA6BR,OAAO,GAAG,GAAV,GAAgBS;AAA7C;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UAFF;AAgBD,CA7DD;;GAAMjB,Q;UAEmEF,Q;;;KAFnEE,Q;AA+DN,eAAeA,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport useTimer from './useTimer';\nimport './ToDoList.css'\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react-dom';\n\nconst OurTimer = (props) => {\n  const roomId =  props.room;\n  const {start, sendStart, work, sendWork, minutes, seconds, sendTime} = useTimer(roomId)\n  \n\n  // useEffect(sendTime(minutes,seconds), [seconds]) adding effect hook to call send time\n\n\n  //calls decrement every time start changes\n  \n\n\n  //function for adjusting display time\n  \n\n  //calls time on every re-render\n\n\n  //click handlers\n  const handleStart = () => sendStart(start);\n\n  const handleWork = () => {\n    if (work === true){\n      setMinutes(5);\n      setSeconds(0);\n    } else {\n      setMinutes(25);\n      setSeconds(0);\n    }\n    sendWork(work)\n  }\n\n  //variables for display\n  let startStatus = (start ? 'STOP' : 'START');\n  let workStatus = (work ? 'REST' : 'WORK');\n  //adds zero when seconds gets into single digits\n  let secondsDisplay;\n  if (seconds < 10) {\n    secondsDisplay = '0'+seconds\n  } else {\n    secondsDisplay = seconds\n  }\n\n  \n\n  return (\n    \n    <section>\n        \n        <section className=\"timerTimer\">\n          <div>\n            <div className = 'buttons'>\n              <Button variant=\"secondary\" onClick={handleStart} >{startStatus}</Button>{' '}\n              <Button variant=\"secondary\" onClick ={handleWork} >{workStatus}</Button>{' '} \n            </div> \n            <h1 className='timerMargin'>{minutes + ':' + secondsDisplay}</h1>\n          </div>\n\n      </section> \n    </section>\n  )\n}\n\nexport default OurTimer\n"]},"metadata":{},"sourceType":"module"}