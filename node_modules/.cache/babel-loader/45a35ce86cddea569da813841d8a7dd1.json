{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nconst NEW_TASK_EVENT = 'newTaskItem';\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\nconst STATUS_CHANGE = 'statusChange';\nconst CLEAR_COMPLETE = 'clearCompleteTasks';\n\nconst useList = roomId => {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [statuses, setStatuses] = useState([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for incoming tasks\n\n    socketRef.current.on(NEW_TASK_EVENT, task => {\n      const incomingTask = { ...task,\n        ownedByCurrentUser: task.senderId === socketRef.current.id\n      }; //adds task to tasks list, adds corresponding status to statuses\n\n      setTasks(tasks => [...tasks, incomingTask]);\n      const copy = [...statuses];\n      copy.push(false);\n      setStatuses(statuses => [...statuses, false]);\n    }); // listens for status changes\n\n    socketRef.current.on(STATUS_CHANGE, data => {\n      console.log('before', data.status);\n      const copy = [...data.status];\n      copy[data.index] = !copy[data.index];\n      setStatuses(copy);\n    }); // listens for clear \n\n    socketRef.current.on(CLEAR_COMPLETE, data => {\n      console.log('clear', data);\n      const indices = [];\n      const statusesCopy = [];\n\n      for (let i = 0; i < data.status.length; i++) {\n        if (data.status[i] === true) {\n          indices.push(i);\n        } else {\n          statusesCopy.push(false);\n        }\n      }\n\n      setStatuses(statusesCopy); // setCompleteIndices(indices)\n\n      console.log('indices', indices); // using indices to delete corresponding tasks\n\n      const copy = [...data.tasks];\n      console.log(data.tasks);\n\n      for (let i = indices.length - 1; i > -1; i--) {\n        copy.splice(indices[i], 1);\n      }\n\n      setTasks(copy);\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, statuses]); //sends message to server that forwards to all users in room\n\n  const sendTask = taskBody => {\n    socketRef.current.emit(NEW_TASK_EVENT, {\n      body: taskBody,\n      senderId: socketRef.current.id\n    });\n  }; //sends status change to server\n\n\n  const sendStatus = (index, statuses) => {\n    socketRef.current.emit(STATUS_CHANGE, {\n      index: index,\n      status: statuses\n    });\n  }; //sends clear notif to server\n\n\n  const sendClear = (statuses, tasks) => {\n    socketRef.current.emit(CLEAR_COMPLETE, {\n      status: statuses,\n      tasks: tasks\n    });\n  };\n\n  return {\n    tasks,\n    sendTask,\n    statuses,\n    sendStatus,\n    sendClear\n  };\n};\n\n_s(useList, \"+Cdu3PuPr47Dy81IvNTZSE/U0ac=\");\n\nexport default useList;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/useList.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_TASK_EVENT","SOCKET_SERVER_URL","STATUS_CHANGE","CLEAR_COMPLETE","useList","roomId","tasks","setTasks","statuses","setStatuses","socketRef","current","query","on","task","incomingTask","ownedByCurrentUser","senderId","id","copy","push","data","console","log","status","index","indices","statusesCopy","i","length","splice","disconnect","sendTask","taskBody","emit","body","sendStatus","sendClear"],"mappings":"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","sourcesContent":["import {useEffect, useRef, useState} from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_TASK_EVENT = 'newTaskItem';\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\nconst STATUS_CHANGE = 'statusChange'\nconst CLEAR_COMPLETE = 'clearCompleteTasks'\n\nconst useList = (roomId) => {\n    const [tasks, setTasks] = useState([]);\n    const [statuses, setStatuses] = useState([]);\n    const socketRef = useRef();\n    \n\n    useEffect(()=> {\n\n        \n\n\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        // listens for incoming tasks\n        socketRef.current.on(NEW_TASK_EVENT, (task) => {\n            const incomingTask = {\n                ...task,\n                ownedByCurrentUser: task.senderId === socketRef.current.id\n            };\n\n            //adds task to tasks list, adds corresponding status to statuses\n            setTasks((tasks) => [...tasks, incomingTask])\n            const copy = [...statuses];\n            copy.push(false);\n            setStatuses((statuses) => [...statuses, false])\n\n        });\n\n        // listens for status changes\n        socketRef.current.on(STATUS_CHANGE, (data) => {\n            console.log('before', data.status)\n            const copy = [...data.status]\n            copy[data.index] = !copy[data.index];\n            setStatuses(copy);\n        })\n\n        // listens for clear \n        socketRef.current.on(CLEAR_COMPLETE, (data) => {\n            console.log('clear', data)\n            const indices = []\n            const statusesCopy = []\n            for (let i=0; i < data.status.length; i++) {\n                if (data.status[i] === true) {\n                    indices.push(i)\n                } else {\n                    statusesCopy.push(false)\n                }\n            }\n\n            setStatuses(statusesCopy)\n            // setCompleteIndices(indices)\n            console.log('indices',indices)\n            \n\n            // using indices to delete corresponding tasks\n            const copy = [...data.tasks]\n            console.log(data.tasks)\n            for (let i=indices.length-1; i>(-1);i--) {\n                copy.splice(indices[i],1)\n            }\n            setTasks(copy);\n\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,statuses]);\n\n    //sends message to server that forwards to all users in room\n    const sendTask = (taskBody) => {\n        socketRef.current.emit(NEW_TASK_EVENT, {\n            body: taskBody,\n            senderId: socketRef.current.id,\n        });\n    }\n\n    //sends status change to server\n    const sendStatus = (index,statuses) => {\n        socketRef.current.emit(STATUS_CHANGE, {\n            index: index,\n            status: statuses,\n        })\n    }\n\n    //sends clear notif to server\n    const sendClear = (statuses,tasks) => {\n        socketRef.current.emit(CLEAR_COMPLETE, {\n            status: statuses,\n            tasks: tasks,\n        }) \n    }\n\n    return {tasks, sendTask, statuses, sendStatus, sendClear}\n}\n\nexport default useList"]},"metadata":{},"sourceType":"module"}