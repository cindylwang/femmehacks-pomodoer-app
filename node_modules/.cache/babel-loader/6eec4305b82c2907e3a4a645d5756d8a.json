{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client';\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const socketRef = useRef();\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      if (data.hardset === false) {\n        setWork(!data.work);\n      } else {\n        setWork(data.hardsetvalue);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, start]); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start\n    });\n  };\n\n  const sendWork = (work, hardset, hardsetvalue) => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work,\n      hardset: hardset,\n      hardsetvalue: hardsetvalue\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork\n  };\n};\n\n_s(useTimer, \"dETG0RgS/y7PJVFKSay6wASXTrg=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","useTimer","roomId","start","setStart","work","setWork","socketRef","current","query","on","data","hardset","hardsetvalue","disconnect","sendStart","emit","sendWork"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA0C,OAA1C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,iBAAiB,GAAG,uBAA1B;AACA,MAAMC,gBAAgB,GAAG,WAAzB;AACA,MAAMC,eAAe,GAAG,cAAxB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAMY,SAAS,GAAGX,MAAM,EAAxB;AAEAF,EAAAA,SAAS,CAAC,MAAK;AACX;AACAa,IAAAA,SAAS,CAACC,OAAV,GAAoBX,cAAc,CAACC,iBAAD,EAAoB;AAClDW,MAAAA,KAAK,EAAC;AAACP,QAAAA;AAAD;AAD4C,KAApB,CAAlC,CAFW,CAMX;;AACAK,IAAAA,SAAS,CAACC,OAAV,CAAkBE,EAAlB,CAAqBX,gBAArB,EAAwCY,IAAD,IAAU;AAC7CP,MAAAA,QAAQ,CAAC,CAACO,IAAI,CAACR,KAAP,CAAR;AACH,KAFD;AAIAI,IAAAA,SAAS,CAACC,OAAV,CAAkBE,EAAlB,CAAqBV,eAArB,EAAuCW,IAAD,IAAU;AAC5C,UAAIA,IAAI,CAACC,OAAL,KAAiB,KAArB,EAA4B;AACxBN,QAAAA,OAAO,CAAC,CAACK,IAAI,CAACN,IAAP,CAAP;AACH,OAFD,MAEO;AACHC,QAAAA,OAAO,CAACK,IAAI,CAACE,YAAN,CAAP;AACH;AAEJ,KAPD,EAXW,CAoBX;;AACA,WAAO,MAAM;AACTN,MAAAA,SAAS,CAACC,OAAV,CAAkBM,UAAlB;AACH,KAFD;AAGH,GAxBQ,EAwBN,CAACZ,MAAD,EAAQC,KAAR,CAxBM,CAAT,CALyB,CA+BzB;;AACA,QAAMY,SAAS,GAAIZ,KAAD,IAAW;AACzBI,IAAAA,SAAS,CAACC,OAAV,CAAkBQ,IAAlB,CAAuBjB,gBAAvB,EAAyC;AACrCI,MAAAA,KAAK,EAAEA;AAD8B,KAAzC;AAGH,GAJD;;AAMA,QAAMc,QAAQ,GAAG,CAACZ,IAAD,EAAMO,OAAN,EAAcC,YAAd,KAA+B;AAC5CN,IAAAA,SAAS,CAACC,OAAV,CAAkBQ,IAAlB,CAAuBhB,eAAvB,EAAwC;AACpCK,MAAAA,IAAI,EAAEA,IAD8B;AAEpCO,MAAAA,OAAO,EAAEA,OAF2B;AAGpCC,MAAAA,YAAY,EAAEA;AAHsB,KAAxC;AAKH,GAND;;AAQA,SAAO;AAACV,IAAAA,KAAD;AAAQY,IAAAA,SAAR;AAAmBV,IAAAA,IAAnB;AAAyBY,IAAAA;AAAzB,GAAP;AACH,CA/CD;;GAAMhB,Q;;AAiDN,eAAeA,QAAf","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const socketRef = useRef();\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n        })\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            if (data.hardset === false) {\n                setWork(!data.work);\n            } else {\n                setWork(data.hardsetvalue);\n            }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,start]);\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start\n        });\n    }\n\n    const sendWork = (work,hardset,hardsetvalue) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n            hardset: hardset,\n            hardsetvalue: hardsetvalue,\n        })\n    }\n\n    return {start, sendStart, work, sendWork}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}