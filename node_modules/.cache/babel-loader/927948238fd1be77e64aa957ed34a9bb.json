{"ast":null,"code":"var _jsxFileName = \"/Users/cindywang/femmehacks-pomodoer-app/src/App.js\";\nimport './App.css';\nimport ReactDOM from 'react';\nimport Timer from './components/Timer/Timer';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport React, { ComponentType, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  class Timer extends ComponentType {\n    //   constructor(props) {\n    //     super(props);\n    //     this.state ={\n    //       started: false,\n    //       work: true,\n    //       count: 1500,\n    //       // minutes: 24,\n    //       // seconds: 59,\n    //       over: false,\n    //     }\n    //   }\n    //   //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n    //   handleClick() {\n    //     this.setState({\n    //       started: (!this.state.started),\n    //       work: (!this.state.work),\n    //     })\n    //   }\n    //   componentDidMount(){\n    //     const {startCount} = this.props\n    //     this.setState({\n    //         count: startCount\n    //     })\n    //     if (this.state.started === true) {\n    //       this.interval = setInterval(()=>{\n    //         this.setState(prevState =>({\n    //             count: prevState.count - 1\n    //             }))\n    //         }, 1000)\n    //     }\n    // }\n    // componentWillUnmount(){\n    //     clearInterval(this.interval)\n    // }\n    render() {\n      // let startStatus = (this.state.started ? 'STOP' : 'START');\n      // let workStatus = (this.state.work ? 'REST' : 'WORK');\n      // const {count} = this.state\n      return /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"row\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"hello please work\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"timer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this);\n    }\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Pomodoer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Timer, {\n        startCount: \"1000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cindywang/femmehacks-pomodoer-app/src/App.js"],"names":["ReactDOM","Timer","Container","Button","React","ComponentType","useState","useRef","App","render"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,QAAP,MAAqB,OAArB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,MAAzC,QAAuD,OAAvD;;;AAGA,SAASC,GAAT,GAAe;AAEb,QAAMP,KAAN,SAAoBI,aAApB,CAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AAEEI,IAAAA,MAAM,GAAI;AACR;AACA;AACA;AAEA,0BACE;AAAS,QAAA,SAAS,EAAC,iBAAnB;AAAA,gCACE;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAS,UAAA,SAAS,EAAC,OAAnB;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAeD;;AAjE6B;;AAqElC,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,UAAU,EAAG;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;KArFQD,G;AAuFT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport ReactDOM from 'react';\nimport Timer from './components/Timer/Timer';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport React, { ComponentType, useState, useRef } from 'react';\n\n\nfunction App() {  \n  \n  class Timer extends ComponentType {\n    //   constructor(props) {\n    //     super(props);\n    //     this.state ={\n    //       started: false,\n    //       work: true,\n    //       count: 1500,\n    //       // minutes: 24,\n    //       // seconds: 59,\n    //       over: false,\n    //     }\n    //   }\n    \n    //   //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n    //   handleClick() {\n    //     this.setState({\n    //       started: (!this.state.started),\n    //       work: (!this.state.work),\n    //     })\n    //   }\n    \n    //   componentDidMount(){\n    //     const {startCount} = this.props\n    //     this.setState({\n    //         count: startCount\n    //     })\n    //     if (this.state.started === true) {\n    //       this.interval = setInterval(()=>{\n    //         this.setState(prevState =>({\n    //             count: prevState.count - 1\n    //             }))\n    //         }, 1000)\n    //     }\n  \n    // }\n  \n  \n  \n   \n  \n  \n    // componentWillUnmount(){\n    //     clearInterval(this.interval)\n    // }\n      \n      render () {\n        // let startStatus = (this.state.started ? 'STOP' : 'START');\n        // let workStatus = (this.state.work ? 'REST' : 'WORK');\n        // const {count} = this.state\n  \n        return (\n          <section className=\"timer-container\">\n            <row>\n              <p>hello please work</p>\n            {/* hopefully renders buttons in a row on top of the timer. added custom css for the buttons too!*/}\n            {/* <Button variant=\"secondary\" onClick={() => this.handleClick()}>{startStatus}</Button>{' '}\n            <Button variant=\"secondary\" onClick={() => this.handleClick()}>{workStatus}</Button>{' '} */}\n            </row>\n            <section className=\"timer\">\n              <div>\n                  {/* <h1>{count}</h1> */}\n              </div>\n            </section>\n          </section> \n        )\n      }\n      \n      \n    }\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n          <a> \n            Pomodoer\n          </a>\n        </header>\n        <div>\n          <Timer startCount = '1000' /> \n        </div>\n        \n\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}