{"ast":null,"code":"var _jsxFileName = \"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport useTimer from './useTimer';\nimport './ToDoList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OurTimer = props => {\n  _s();\n\n  const roomId = props.room;\n  const {\n    start,\n    sendStart,\n    work,\n    sendWork\n  } = useTimer(roomId);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  var hardset = false;\n  var hardsetvalue = null; //function for decrementing timer\n\n  const decrement = () => {\n    if (start === true) {\n      const intervalId = setInterval(() => {\n        setSeconds(prev => prev - 1);\n      }, 1000);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }; //calls decrement every time start changes\n\n\n  useEffect(decrement, [start]); //function for adjusting display time\n\n  const time = () => {\n    if (start === true) {\n      if (seconds === -1 && minutes !== 0) {\n        setSeconds(59);\n        setMinutes(prev => prev - 1);\n        hardset = false;\n      } else if (minutes === 0 && seconds === -1 && work === true) {\n        setMinutes(5);\n        setSeconds(0);\n        hardset = true;\n        hardsetvalue = false;\n      } else if (minutes === 0 && seconds === -1 && work === false) {\n        setMinutes(25);\n        setSeconds(0);\n        hardset = true;\n        hardsetvalue = true;\n      }\n\n      sendWork(work, hardset, hardsetvalue);\n    }\n  }; //calls time on every re-render\n\n\n  useEffect(time, [seconds]); //click handlers\n\n  const handleStart = () => sendStart(start);\n\n  const handleWork = () => {\n    sendWork(work, hardset, hardsetvalue);\n  };\n\n  const checkWork = () => {\n    if (work === false) {\n      setMinutes(5);\n      setSeconds(0);\n    } else {\n      setMinutes(25);\n      setSeconds(0);\n    }\n  };\n\n  useEffect(checkWork, [work]); //variables for display\n\n  let startStatus = start ? 'STOP' : 'START';\n  let workStatus = work ? 'REST' : 'WORK'; //adds zero when seconds gets into single digits\n\n  let secondsDisplay;\n\n  if (seconds < 10) {\n    secondsDisplay = '0' + seconds;\n  } else {\n    secondsDisplay = seconds;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"timerTimer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleStart,\n            children: startStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleWork,\n            children: workStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"timerMargin\",\n          children: minutes + ':' + secondsDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OurTimer, \"zffE/FURUj5irV58WJrhQ1KfBLI=\", false, function () {\n  return [useTimer];\n});\n\n_c = OurTimer;\nexport default OurTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"OurTimer\");","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js"],"names":["React","useState","useEffect","Button","useTimer","OurTimer","props","roomId","room","start","sendStart","work","sendWork","minutes","setMinutes","seconds","setSeconds","hardset","hardsetvalue","decrement","intervalId","setInterval","prev","clearInterval","time","handleStart","handleWork","checkWork","startStatus","workStatus","secondsDisplay"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport useTimer from './useTimer';\nimport './ToDoList.css'\n\nconst OurTimer = (props) => {\n  const roomId =  props.room;\n  const {start, sendStart, work, sendWork} = useTimer(roomId)\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  var hardset = false\n  var hardsetvalue = null\n\n  //function for decrementing timer\n  const decrement = () => {\n    if (start === true) {\n      const intervalId = setInterval(() => {\n        setSeconds((prev) => prev - 1);\n      }, 1000);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }\n\n  //calls decrement every time start changes\n  useEffect(decrement, [start]);\n\n\n  //function for adjusting display time\n  const time = () => {\n    \n    if (start === true){\n      if (seconds === -1 && minutes !== 0) {\n        setSeconds(59);\n        setMinutes((prev) => prev - 1);\n        hardset = false\n      } else if (minutes === 0 && seconds === -1 && work === true ) {\n        setMinutes(5);\n        setSeconds(0);\n        hardset = true;\n        hardsetvalue = false;\n      } else if (minutes === 0 && seconds === -1 && work === false) {\n        setMinutes(25);\n        setSeconds(0);\n        hardset = true;\n        hardsetvalue = true;\n      }\n      sendWork(work,hardset,hardsetvalue)\n    }\n    \n  }\n\n  //calls time on every re-render\n  useEffect(time,[seconds]);\n\n  //click handlers\n  const handleStart = () => sendStart(start);\n\n  const handleWork = () => {\n    sendWork(work,hardset,hardsetvalue)\n  }\n\n  const checkWork = () => {\n    if (work === false){\n      setMinutes(5);\n      setSeconds(0);\n    } else {\n      setMinutes(25);\n      setSeconds(0);\n    }\n  }\n\n  useEffect(checkWork, [work])\n\n  //variables for display\n  let startStatus = (start ? 'STOP' : 'START');\n  let workStatus = (work ? 'REST' : 'WORK');\n  //adds zero when seconds gets into single digits\n  let secondsDisplay;\n  if (seconds < 10) {\n    secondsDisplay = '0'+seconds\n  } else {\n    secondsDisplay = seconds\n  }\n\n  \n\n  return (\n    \n    <section>\n        \n        <section className=\"timerTimer\">\n          <div>\n            <div className = 'buttons'>\n              <Button variant=\"secondary\" onClick={handleStart} >{startStatus}</Button>{' '}\n              <Button variant=\"secondary\" onClick ={handleWork} >{workStatus}</Button>{' '} \n            </div> \n            <h1 className='timerMargin'>{minutes + ':' + secondsDisplay}</h1>\n          </div>\n\n      </section> \n    </section>\n  )\n}\n\nexport default OurTimer\n"]},"metadata":{},"sourceType":"module"}