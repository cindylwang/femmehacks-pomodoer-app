{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const socketRef = useRef();\n  const TIMER_START_STOP = 'timerPush';\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!start);\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(NEW_TASK_EVENT, {\n      status: start\n    });\n  };\n\n  return {\n    start,\n    sendStart\n  };\n};\n\n_s(useTimer, \"CCdPwG5VZCq5YtXIs1OJTiL1cnI=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/useTimer.js"],"names":["useEffect","useState","socketIOClient","SOCKET_SERVER_URL","useTimer","roomId","start","setStart","socketRef","useRef","TIMER_START_STOP","current","query","on","data","disconnect","sendStart","emit","NEW_TASK_EVENT","status"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMO,SAAS,GAAGC,MAAM,EAAxB;AACA,QAAMC,gBAAgB,GAAG,WAAzB;AAGAV,EAAAA,SAAS,CAAC,MAAK;AACX;AACAQ,IAAAA,SAAS,CAACG,OAAV,GAAoBT,cAAc,CAACC,iBAAD,EAAoB;AAClDS,MAAAA,KAAK,EAAC;AAACP,QAAAA;AAAD;AAD4C,KAApB,CAAlC,CAFW,CAMX;;AACAG,IAAAA,SAAS,CAACG,OAAV,CAAkBE,EAAlB,CAAqBH,gBAArB,EAAwCI,IAAD,IAAU;AAC7CP,MAAAA,QAAQ,CAAC,CAACD,KAAF,CAAR;AACH,KAFD,EAPW,CAWX;;AACA,WAAO,MAAM;AACTE,MAAAA,SAAS,CAACG,OAAV,CAAkBI,UAAlB;AACH,KAFD;AAGH,GAfQ,EAeN,CAACV,MAAD,CAfM,CAAT,CANyB,CAuBzB;;AACA,QAAMW,SAAS,GAAIV,KAAD,IAAW;AACzBE,IAAAA,SAAS,CAACG,OAAV,CAAkBM,IAAlB,CAAuBC,cAAvB,EAAuC;AACnCC,MAAAA,MAAM,EAAEb;AAD2B,KAAvC;AAGH,GAJD;;AAMA,SAAO;AAACA,IAAAA,KAAD;AAAQU,IAAAA;AAAR,GAAP;AACH,CA/BD;;GAAMZ,Q;;AAiCN,eAAeA,QAAf","sourcesContent":["import {useEffect, useState} from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const socketRef = useRef();\n    const TIMER_START_STOP = 'timerPush'\n    \n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!start);\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(NEW_TASK_EVENT, {\n            status: start\n        });\n    }\n\n    return {start, sendStart}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}