{"ast":null,"code":"var _jsxFileName = \"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js\";\nimport React, { Component } from 'react';\nimport './Timer.css';\nimport Button from 'react-bootstrap/Button';\nimport './ToDoList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OurTimer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      work: true,\n      minutes: 24,\n      seconds: 59,\n      over: false\n    };\n  } //   //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n\n\n  handleStart() {\n    this.setState({\n      started: !this.state.started\n    });\n  }\n\n  handleRest() {\n    this.setState({\n      work: !this.state.work\n    });\n  }\n\n  componentDidMount() {// const startCount = this.state.seconds\n    // this.setState({\n    //     seconds: startCount\n    // })\n    // if (this.state.started === true) {\n    //   this.interval = setInterval(()=>{\n    //     this.setState(prevState =>({\n    //         seconds: prevState.seconds - 1\n    //         }))\n    //     }, 1000)\n    // } else {\n    //   this.setState(prevState=>({prevState}))\n    // }\n  }\n\n  componentDidUpdate() {\n    const startCount = this.state.seconds;\n    this.setState({\n      seconds: startCount\n    });\n\n    if (this.state.started === true) {\n      this.interval = setInterval(() => {\n        this.setState(prevState => ({\n          seconds: prevState.seconds - 1\n        }));\n      }, 1000);\n    } else {\n      this.setState(prevState => ({\n        prevState\n      }));\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    let startStatus = this.state.started ? 'STOP' : 'START';\n    let workStatus = this.state.work ? 'REST' : 'WORK';\n    const seconds = this.state.seconds;\n    const time = this.state.minutes + \":\" + this.state.seconds;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timerTimer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"buttons\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => this.handleStart(),\n              variant: \"secondary\",\n              children: startStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => this.handleRest(),\n              variant: \"secondary\",\n              children: workStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this), ' ']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"timerMargin\",\n            children: time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n} // exporting component\n\n\nexport default OurTimer;\n{\n  /* hopefully renders buttons in a row on top of the timer. added custom css for the buttons too!*/\n} //     const tick = () => {\n//       if (this.state.work === false || this.state.over === false)\n//       if (this.state.minutes === 0 && this.state.seconds === 0) this.setState({over: true});\n//       else if (this.state.rest === true) rest();\n//       else if (this.state.seconds === 0) {\n//          this.setState({minutes: this.state.minutes - 1})\n//          this.setState({seconds: 59})\n//       } else {\n//          this.setState({seconds: this.state.seconds - 1})\n//       }\n//     const rest = () => {\n// if (this.state.work === true) return;\n// else{\n//   this.setState({minutes: 4})\n//   this.setState({seconds: 59})\n// if (this.state.seconds === 0) {\n//  this.setState({minutes: this.state.minutes - 1})\n//  this.setState({seconds: 59})\n//} else {\n//  this.setState({seconds: this.state.seconds - 1})\n// } \n//      }","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js"],"names":["React","Component","Button","OurTimer","constructor","props","state","started","work","minutes","seconds","over","handleStart","setState","handleRest","componentDidMount","componentDidUpdate","startCount","interval","setInterval","prevState","componentWillUnmount","clearInterval","render","startStatus","workStatus","time"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './Timer.css'\nimport Button from 'react-bootstrap/Button';\nimport './ToDoList.css';\n\n\nclass OurTimer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      work: true,\n      minutes: 24,\n      seconds: 59,\n      over: false,\n    }\n  }\n\n//   //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n  handleStart() {\n    this.setState({\n      started: (!this.state.started),\n    })\n  }\n\n  handleRest() {\n    this.setState({\n      work: (!this.state.work),\n    })\n  }\n\ncomponentDidMount(){\n  // const startCount = this.state.seconds\n  // this.setState({\n  //     seconds: startCount\n  // })\n  // if (this.state.started === true) {\n  //   this.interval = setInterval(()=>{\n  //     this.setState(prevState =>({\n  //         seconds: prevState.seconds - 1\n  //         }))\n  //     }, 1000)\n  // } else {\n  //   this.setState(prevState=>({prevState}))\n  // }\n}\n\ncomponentDidUpdate(){\n  const startCount = this.state.seconds\n  this.setState({\n      seconds: startCount\n  })\n  if (this.state.started === true) {\n    this.interval = setInterval(()=>{\n      this.setState(prevState =>({\n          seconds: prevState.seconds - 1\n          }))\n      }, 1000)\n  } else {\n    this.setState(prevState=>({prevState}))\n  }\n}\n\n\ncomponentWillUnmount(){\n    clearInterval(this.interval)\n}\n  \n  render () {\n    let startStatus = (this.state.started ? 'STOP' : 'START');\n    let workStatus = (this.state.work ? 'REST' : 'WORK');\n    const seconds = this.state.seconds;\n    const time = this.state.minutes + \":\" + this.state.seconds\n\n    return (\n    \n      <section>\n          \n          <section className=\"timerTimer\">\n            <div>\n              <div className = 'buttons'>\n                <Button onClick={()=>this.handleStart()} variant=\"secondary\" >{startStatus}</Button>{' '}\n                <Button onClick={()=>this.handleRest()} variant=\"secondary\" >{workStatus}</Button>{' '} \n              </div> \n              <h1 className='timerMargin'>{time}</h1>\n            </div>\n\n        </section> \n      </section>\n    )\n  }\n  \n  \n}\n\n  // exporting component\n  export default OurTimer\n\n\n  {/* hopefully renders buttons in a row on top of the timer. added custom css for the buttons too!*/}\n          \n\n\n\n//     const tick = () => {\n//       if (this.state.work === false || this.state.over === false)\n//       if (this.state.minutes === 0 && this.state.seconds === 0) this.setState({over: true});\n//       else if (this.state.rest === true) rest();\n//       else if (this.state.seconds === 0) {\n//          this.setState({minutes: this.state.minutes - 1})\n//          this.setState({seconds: 59})\n//       } else {\n//          this.setState({seconds: this.state.seconds - 1})\n//       }\n\n//     const rest = () => {\n          // if (this.state.work === true) return;\n          // else{\n          //   this.setState({minutes: 4})\n          //   this.setState({seconds: 59})\n          // if (this.state.seconds === 0) {\n            //  this.setState({minutes: this.state.minutes - 1})\n            //  this.setState({seconds: 59})\n            //} else {\n            //  this.setState({seconds: this.state.seconds - 1})\n          // } \n//      }"]},"metadata":{},"sourceType":"module"}