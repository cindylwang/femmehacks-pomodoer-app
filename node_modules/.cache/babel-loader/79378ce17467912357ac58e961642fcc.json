{"ast":null,"code":"var _jsxFileName = \"/Users/cindywang/femmehacks-pomodoer-app/src/components/Timer/Timer.js\";\nimport React, { ComponentType } from 'react';\nimport './Timer.css';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Timer extends ComponentType {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      work: true,\n      count: 1500,\n      // minutes: 24,\n      // seconds: 59,\n      over: false\n    };\n  } //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n\n\n  handleClick() {\n    this.setState({\n      started: !this.state.started,\n      work: !this.state.work\n    });\n  }\n\n  componentDidMount() {\n    const {\n      startCount\n    } = this.props;\n    this.setState({\n      count: startCount\n    });\n\n    if (this.state.started === true) {\n      this.interval = setInterval(() => {\n        this.setState(prevState => ({\n          count: prevState.count - 1\n        }));\n      }, 1000);\n    }\n  } //     const tick = () => {\n  //       if (this.state.work === false || this.state.over === false)\n  //       if (this.state.minutes === 0 && this.state.seconds === 0) this.setState({over: true});\n  //       else if (this.state.rest === true) rest();\n  //       else if (this.state.seconds === 0) {\n  //          this.setState({minutes: this.state.minutes - 1})\n  //          this.setState({seconds: 59})\n  //       } else {\n  //          this.setState({seconds: this.state.seconds - 1})\n  //       }\n  //     const rest = () => {\n  // if (this.state.rest === false) return;\n  // else{\n  //   this.setState({minutes: 4})\n  //   this.setState({seconds: 59})\n  // if (this.state.seconds === 0) {\n  //          this.setState({minutes: this.state.minutes - 1})\n  //          this.setState({seconds: 59})\n  //       } else {\n  //          this.setState({seconds: this.state.seconds - 1})\n  // } \n  //      }\n\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    let startStatus = this.state.started ? 'STOP' : 'START';\n    let workStatus = this.state.work ? 'REST' : 'WORK';\n    const {\n      count\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"timer-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"row\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => this.handleClick(),\n          children: startStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => this.handleClick(),\n          children: workStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this);\n  }\n\n} // exporting component\n\n\nexport default Timer;","map":{"version":3,"sources":["/Users/cindywang/femmehacks-pomodoer-app/src/components/Timer/Timer.js"],"names":["React","ComponentType","Button","Timer","constructor","props","state","started","work","count","over","handleClick","setState","componentDidMount","startCount","interval","setInterval","prevState","componentWillUnmount","clearInterval","render","startStatus","workStatus"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAEC,MAAMC,KAAN,SAAoBF,aAApB,CAAkC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACVC,MAAAA,OAAO,EAAE,KADC;AAEVC,MAAAA,IAAI,EAAE,IAFI;AAGVC,MAAAA,KAAK,EAAE,IAHG;AAIV;AACA;AACAC,MAAAA,IAAI,EAAE;AANI,KAAZ;AAQD,GAX8B,CAa/B;;;AACAC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,CAAc;AACZL,MAAAA,OAAO,EAAG,CAAC,KAAKD,KAAL,CAAWC,OADV;AAEZC,MAAAA,IAAI,EAAG,CAAC,KAAKF,KAAL,CAAWE;AAFP,KAAd;AAID;;AAEDK,EAAAA,iBAAiB,GAAE;AACjB,UAAM;AAACC,MAAAA;AAAD,QAAe,KAAKT,KAA1B;AACA,SAAKO,QAAL,CAAc;AACVH,MAAAA,KAAK,EAAEK;AADG,KAAd;;AAGA,QAAI,KAAKR,KAAL,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC/B,WAAKQ,QAAL,GAAgBC,WAAW,CAAC,MAAI;AAC9B,aAAKJ,QAAL,CAAcK,SAAS,KAAI;AACvBR,UAAAA,KAAK,EAAEQ,SAAS,CAACR,KAAV,GAAkB;AADF,SAAJ,CAAvB;AAGC,OAJwB,EAItB,IAJsB,CAA3B;AAKD;AAEJ,GAlCgC,CAsCnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACU;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACF;AACV;;;AAIES,EAAAA,oBAAoB,GAAE;AAClBC,IAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACH;;AAECK,EAAAA,MAAM,GAAI;AACR,QAAIC,WAAW,GAAI,KAAKf,KAAL,CAAWC,OAAX,GAAqB,MAArB,GAA8B,OAAjD;AACA,QAAIe,UAAU,GAAI,KAAKhB,KAAL,CAAWE,IAAX,GAAkB,MAAlB,GAA2B,MAA7C;AACA,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKH,KAArB;AAEA,wBACE;AAAS,MAAA,SAAS,EAAC,iBAAnB;AAAA,8BACE;AAAA,gCAEA,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAE,MAAM,KAAKK,WAAL,EAA3C;AAAA,oBAAgEU;AAAhE;AAAA;AAAA;AAAA;AAAA,gBAFA,EAEsF,GAFtF,eAGA,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAE,MAAM,KAAKV,WAAL,EAA3C;AAAA,oBAAgEW;AAAhE;AAAA;AAAA;AAAA;AAAA,gBAHA,EAGqF,GAHrF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAS,QAAA,SAAS,EAAC,OAAnB;AAAA,+BACE;AAAA,iCACI;AAAA,sBAAKb;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAvF8B,C,CA4FjC;;;AACA,eAAeN,KAAf","sourcesContent":["import React, { ComponentType } from 'react';\nimport './Timer.css'\nimport Button from 'react-bootstrap/Button';\n\n class Timer extends ComponentType {\n    constructor(props) {\n      super(props);\n      this.state ={\n        started: false,\n        work: true,\n        count: 1500,\n        // minutes: 24,\n        // seconds: 59,\n        over: false,\n      }\n    }\n  \n    //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n    handleClick() {\n      this.setState({\n        started: (!this.state.started),\n        work: (!this.state.work),\n      })\n    }\n  \n    componentDidMount(){\n      const {startCount} = this.props\n      this.setState({\n          count: startCount\n      })\n      if (this.state.started === true) {\n        this.interval = setInterval(()=>{\n          this.setState(prevState =>({\n              count: prevState.count - 1\n              }))\n          }, 1000)\n      }\n\n  }\n\n\n\n//     const tick = () => {\n//       if (this.state.work === false || this.state.over === false)\n//       if (this.state.minutes === 0 && this.state.seconds === 0) this.setState({over: true});\n//       else if (this.state.rest === true) rest();\n//       else if (this.state.seconds === 0) {\n//          this.setState({minutes: this.state.minutes - 1})\n//          this.setState({seconds: 59})\n//       } else {\n//          this.setState({seconds: this.state.seconds - 1})\n//       }\n\n//     const rest = () => {\n          // if (this.state.rest === false) return;\n          // else{\n          //   this.setState({minutes: 4})\n          //   this.setState({seconds: 59})\n          // if (this.state.seconds === 0) {\n            //          this.setState({minutes: this.state.minutes - 1})\n            //          this.setState({seconds: 59})\n            //       } else {\n            //          this.setState({seconds: this.state.seconds - 1})\n          // } \n//      }\n\n\n\n  componentWillUnmount(){\n      clearInterval(this.interval)\n  }\n    \n    render () {\n      let startStatus = (this.state.started ? 'STOP' : 'START');\n      let workStatus = (this.state.work ? 'REST' : 'WORK');\n      const {count} = this.state\n\n      return (\n        <section className=\"timer-container\">\n          <row>\n          {/* hopefully renders buttons in a row on top of the timer. added custom css for the buttons too!*/}\n          <Button variant=\"secondary\" onClick={() => this.handleClick()}>{startStatus}</Button>{' '}\n          <Button variant=\"secondary\" onClick={() => this.handleClick()}>{workStatus}</Button>{' '}\n          </row>\n          <section className=\"timer\">\n            <div>\n                <h1>{count}</h1>\n            </div>\n          </section>\n        </section> \n      )\n    }\n    \n    \n}\n\n  // exporting component\n  export default Timer\n  \n  \n"]},"metadata":{},"sourceType":"module"}