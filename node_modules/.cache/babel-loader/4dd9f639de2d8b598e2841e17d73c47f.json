{"ast":null,"code":"var _jsxFileName = \"/Users/cindywang/femmehacks-pomodoer-app/src/components/Timer/Timer.js\";\nimport React, { Component } from 'react';\nimport './Timer.css';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OurTimer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false,\n      work: true,\n      count: 1500,\n      minutes: 24,\n      // seconds: 59,\n      over: false\n    };\n  } //   //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n\n\n  handleClick() {\n    this.setState({\n      started: !this.state.started,\n      work: !this.state.work\n    });\n  }\n\n  componentDidMount() {\n    const startCount = this.props.seconds;\n    this.setState({\n      count: startCount\n    });\n\n    if (this.state.started === true) {\n      this.interval = setInterval(() => {\n        this.setState(prevState => ({\n          count: prevState.count - 1\n        }));\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    let startStatus = this.state.started ? 'STOP' : 'START';\n    let workStatus = this.state.work ? 'REST' : 'WORK';\n    const count = this.state.count;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"timer-container\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this);\n  }\n\n} // exporting component\n\n\nexport default OurTimer;\n{\n  /* hopefully renders buttons in a row on top of the timer. added custom css for the buttons too!*/\n}\n{\n  /* <Button variant=\"secondary\" onClick={this.handleClick()}>{startStatus}</Button>{' '}\n  <Button variant=\"secondary\" onClick={this.handleClick()}>{workStatus}</Button>{' '} */\n} //     const tick = () => {\n//       if (this.state.work === false || this.state.over === false)\n//       if (this.state.minutes === 0 && this.state.seconds === 0) this.setState({over: true});\n//       else if (this.state.rest === true) rest();\n//       else if (this.state.seconds === 0) {\n//          this.setState({minutes: this.state.minutes - 1})\n//          this.setState({seconds: 59})\n//       } else {\n//          this.setState({seconds: this.state.seconds - 1})\n//       }\n//     const rest = () => {\n// if (this.state.work === true) return;\n// else{\n//   this.setState({minutes: 4})\n//   this.setState({seconds: 59})\n// if (this.state.seconds === 0) {\n//  this.setState({minutes: this.state.minutes - 1})\n//  this.setState({seconds: 59})\n//} else {\n//  this.setState({seconds: this.state.seconds - 1})\n// } \n//      }","map":{"version":3,"sources":["/Users/cindywang/femmehacks-pomodoer-app/src/components/Timer/Timer.js"],"names":["React","Component","Button","OurTimer","constructor","props","state","started","work","count","minutes","over","handleClick","setState","componentDidMount","startCount","seconds","interval","setInterval","prevState","componentWillUnmount","clearInterval","render","startStatus","workStatus"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAGA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC7BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KADE;AAEXC,MAAAA,IAAI,EAAE,IAFK;AAGXC,MAAAA,KAAK,EAAE,IAHI;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKX;AACAC,MAAAA,IAAI,EAAE;AANK,KAAb;AAQD,GAX4B,CAa/B;;;AACEC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,CAAc;AACZN,MAAAA,OAAO,EAAG,CAAC,KAAKD,KAAL,CAAWC,OADV;AAEZC,MAAAA,IAAI,EAAG,CAAC,KAAKF,KAAL,CAAWE;AAFP,KAAd;AAID;;AAEHM,EAAAA,iBAAiB,GAAE;AACjB,UAAMC,UAAU,GAAG,KAAKV,KAAL,CAAWW,OAA9B;AACA,SAAKH,QAAL,CAAc;AACVJ,MAAAA,KAAK,EAAEM;AADG,KAAd;;AAGA,QAAI,KAAKT,KAAL,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC/B,WAAKU,QAAL,GAAgBC,WAAW,CAAC,MAAI;AAC9B,aAAKL,QAAL,CAAcM,SAAS,KAAI;AACvBV,UAAAA,KAAK,EAAEU,SAAS,CAACV,KAAV,GAAkB;AADF,SAAJ,CAAvB;AAGC,OAJwB,EAItB,IAJsB,CAA3B;AAKD;AACJ;;AAKCW,EAAAA,oBAAoB,GAAE;AAClBC,IAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACH;;AAECK,EAAAA,MAAM,GAAI;AACR,QAAIC,WAAW,GAAI,KAAKjB,KAAL,CAAWC,OAAX,GAAqB,MAArB,GAA8B,OAAjD;AACA,QAAIiB,UAAU,GAAI,KAAKlB,KAAL,CAAWE,IAAX,GAAkB,MAAlB,GAA2B,MAA7C;AACA,UAAMC,KAAK,GAAG,KAAKH,KAAL,CAAWG,KAAzB;AAEA,wBACE;AAAS,MAAA,SAAS,EAAC,iBAAnB;AAAA,6BACE;AAAS,QAAA,SAAS,EAAC,OAAnB;AAAA,+BACE;AAAA,iCACI;AAAA,sBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAxD4B,C,CA6D/B;;;AACA,eAAeN,QAAf;AAGA;AAAC;AAAmG;AAC5F;AAAC;AACX;AAAiG,C,CAIjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACU;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACF;AACV","sourcesContent":["import React, {Component} from 'react';\nimport './Timer.css'\nimport Button from 'react-bootstrap/Button';\n\n\nclass OurTimer extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        started: false,\n        work: true,\n        count: 1500,\n        minutes: 24,\n        // seconds: 59,\n        over: false,\n      }\n    }\n  \n  //   //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n    handleClick() {\n      this.setState({\n        started: (!this.state.started),\n        work: (!this.state.work),\n      })\n    }\n  \n  componentDidMount(){\n    const startCount = this.props.seconds\n    this.setState({\n        count: startCount\n    })\n    if (this.state.started === true) {\n      this.interval = setInterval(()=>{\n        this.setState(prevState =>({\n            count: prevState.count - 1\n            }))\n        }, 1000)\n    }\n}\n\n\n\n\n  componentWillUnmount(){\n      clearInterval(this.interval)\n  }\n    \n    render () {\n      let startStatus = (this.state.started ? 'STOP' : 'START');\n      let workStatus = (this.state.work ? 'REST' : 'WORK');\n      const count = this.state.count;\n\n      return (\n        <section className=\"timer-container\">\n          <section className=\"timer\">\n            <div>\n                <h1>{count}</h1>\n            </div>\n          </section>\n        </section> \n      )\n    }\n    \n    \n  }\n\n  // exporting component\n  export default OurTimer\n\n\n  {/* hopefully renders buttons in a row on top of the timer. added custom css for the buttons too!*/}\n          {/* <Button variant=\"secondary\" onClick={this.handleClick()}>{startStatus}</Button>{' '}\n          <Button variant=\"secondary\" onClick={this.handleClick()}>{workStatus}</Button>{' '} */}\n\n\n\n//     const tick = () => {\n//       if (this.state.work === false || this.state.over === false)\n//       if (this.state.minutes === 0 && this.state.seconds === 0) this.setState({over: true});\n//       else if (this.state.rest === true) rest();\n//       else if (this.state.seconds === 0) {\n//          this.setState({minutes: this.state.minutes - 1})\n//          this.setState({seconds: 59})\n//       } else {\n//          this.setState({seconds: this.state.seconds - 1})\n//       }\n\n//     const rest = () => {\n          // if (this.state.work === true) return;\n          // else{\n          //   this.setState({minutes: 4})\n          //   this.setState({seconds: 59})\n          // if (this.state.seconds === 0) {\n            //  this.setState({minutes: this.state.minutes - 1})\n            //  this.setState({seconds: 59})\n            //} else {\n            //  this.setState({seconds: this.state.seconds - 1})\n          // } \n//      }"]},"metadata":{},"sourceType":"module"}