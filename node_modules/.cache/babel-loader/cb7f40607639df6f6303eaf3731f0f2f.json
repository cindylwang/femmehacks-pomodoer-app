{"ast":null,"code":"var _jsxFileName = \"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js\";\nimport React, { Component } from 'react';\nimport './Timer.css';\nimport Button from 'react-bootstrap/Button';\nimport './ToDoList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OurTimer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: true,\n      work: true,\n      minutes: 24,\n      seconds: 59,\n      over: false\n    };\n  } //   //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n\n\n  handleClick() {\n    this.setState({\n      started: !this.state.started,\n      work: !this.state.work\n    });\n  }\n\n  componentDidMount() {\n    const startCount = this.state.seconds;\n    this.setState({\n      seconds: startCount\n    });\n\n    if (this.state.started === true) {\n      this.interval = setInterval(() => {\n        this.setState(prevState => ({\n          seconds: prevState.seconds - 1\n        }));\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    let startStatus = this.state.started ? 'STOP' : 'START';\n    let workStatus = this.state.work ? 'REST' : 'WORK';\n    const seconds = this.state.seconds;\n    const time = this.state.minutes + \":\" + this.state.seconds;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timerTimer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            children: startStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            children: workStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n} // exporting component\n\n\nexport default OurTimer;\n{\n  /* hopefully renders buttons in a row on top of the timer. added custom css for the buttons too!*/\n} //     const tick = () => {\n//       if (this.state.work === false || this.state.over === false)\n//       if (this.state.minutes === 0 && this.state.seconds === 0) this.setState({over: true});\n//       else if (this.state.rest === true) rest();\n//       else if (this.state.seconds === 0) {\n//          this.setState({minutes: this.state.minutes - 1})\n//          this.setState({seconds: 59})\n//       } else {\n//          this.setState({seconds: this.state.seconds - 1})\n//       }\n//     const rest = () => {\n// if (this.state.work === true) return;\n// else{\n//   this.setState({minutes: 4})\n//   this.setState({seconds: 59})\n// if (this.state.seconds === 0) {\n//  this.setState({minutes: this.state.minutes - 1})\n//  this.setState({seconds: 59})\n//} else {\n//  this.setState({seconds: this.state.seconds - 1})\n// } \n//      }","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js"],"names":["React","Component","Button","OurTimer","constructor","props","state","started","work","minutes","seconds","over","handleClick","setState","componentDidMount","startCount","interval","setInterval","prevState","componentWillUnmount","clearInterval","render","startStatus","workStatus","time"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,gBAAP;;;AAGA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IADE;AAEXC,MAAAA,IAAI,EAAE,IAFK;AAGXC,MAAAA,OAAO,EAAE,EAHE;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKXC,MAAAA,IAAI,EAAE;AALK,KAAb;AAOD,GAV8B,CAYjC;;;AACEC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,CAAc;AACZN,MAAAA,OAAO,EAAG,CAAC,KAAKD,KAAL,CAAWC,OADV;AAEZC,MAAAA,IAAI,EAAG,CAAC,KAAKF,KAAL,CAAWE;AAFP,KAAd;AAID;;AAEHM,EAAAA,iBAAiB,GAAE;AACjB,UAAMC,UAAU,GAAG,KAAKT,KAAL,CAAWI,OAA9B;AACA,SAAKG,QAAL,CAAc;AACVH,MAAAA,OAAO,EAAEK;AADC,KAAd;;AAGA,QAAI,KAAKT,KAAL,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC/B,WAAKS,QAAL,GAAgBC,WAAW,CAAC,MAAI;AAC9B,aAAKJ,QAAL,CAAcK,SAAS,KAAI;AACvBR,UAAAA,OAAO,EAAEQ,SAAS,CAACR,OAAV,GAAoB;AADN,SAAJ,CAAvB;AAGC,OAJwB,EAItB,IAJsB,CAA3B;AAKD;AACF;;AAKDS,EAAAA,oBAAoB,GAAE;AAClBC,IAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACH;;AAECK,EAAAA,MAAM,GAAI;AACR,QAAIC,WAAW,GAAI,KAAKhB,KAAL,CAAWC,OAAX,GAAqB,MAArB,GAA8B,OAAjD;AACA,QAAIgB,UAAU,GAAI,KAAKjB,KAAL,CAAWE,IAAX,GAAkB,MAAlB,GAA2B,MAA7C;AACA,UAAME,OAAO,GAAG,KAAKJ,KAAL,CAAWI,OAA3B;AACA,UAAMc,IAAI,GAAG,KAAKlB,KAAL,CAAWG,OAAX,GAAqB,GAArB,GAA2B,KAAKH,KAAL,CAAWI,OAAnD;AAEA,wBAEE;AAAA,6BAEI;AAAS,QAAA,SAAS,EAAC,YAAnB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAG,SAAjB;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,WAAhB;AAAA,sBAA8BY;AAA9B;AAAA;AAAA;AAAA;AAAA,kBADF,EACsD,GADtD,eAEE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,WAAhB;AAAA,sBAA8BC;AAA9B;AAAA;AAAA;AAAA;AAAA,kBAFF,EAEqD,GAFrD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAA,oBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAcD;;AA7D8B,C,CAkE/B;;;AACA,eAAerB,QAAf;AAGA;AAAC;AAAmG,C,CAKtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACU;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACA;AACF;AACV","sourcesContent":["import React, {Component} from 'react';\nimport './Timer.css'\nimport Button from 'react-bootstrap/Button';\nimport './ToDoList.css';\n\n\nclass OurTimer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: true,\n      work: true,\n      minutes: 24,\n      seconds: 59,\n      over: false,\n    }\n  }\n\n//   //handling if work/rest or start/stop button is pushed, alters states so we can change state-reliant displays later\n  handleClick() {\n    this.setState({\n      started: (!this.state.started),\n      work: (!this.state.work),\n    })\n  }\n\ncomponentDidMount(){\n  const startCount = this.state.seconds\n  this.setState({\n      seconds: startCount\n  })\n  if (this.state.started === true) {\n    this.interval = setInterval(()=>{\n      this.setState(prevState =>({\n          seconds: prevState.seconds - 1\n          }))\n      }, 1000)\n  }\n}\n\n\n\n\ncomponentWillUnmount(){\n    clearInterval(this.interval)\n}\n  \n  render () {\n    let startStatus = (this.state.started ? 'STOP' : 'START');\n    let workStatus = (this.state.work ? 'REST' : 'WORK');\n    const seconds = this.state.seconds;\n    const time = this.state.minutes + \":\" + this.state.seconds\n\n    return (\n    \n      <section>\n          \n          <section className=\"timerTimer\">\n            <div className = 'buttons'>\n              <Button variant=\"secondary\" >{startStatus}</Button>{' '}\n              <Button variant=\"secondary\" >{workStatus}</Button>{' '} \n            </div> \n            <h1>{time}</h1>\n\n        </section> \n      </section>\n    )\n  }\n  \n  \n}\n\n  // exporting component\n  export default OurTimer\n\n\n  {/* hopefully renders buttons in a row on top of the timer. added custom css for the buttons too!*/}\n          \n\n\n\n//     const tick = () => {\n//       if (this.state.work === false || this.state.over === false)\n//       if (this.state.minutes === 0 && this.state.seconds === 0) this.setState({over: true});\n//       else if (this.state.rest === true) rest();\n//       else if (this.state.seconds === 0) {\n//          this.setState({minutes: this.state.minutes - 1})\n//          this.setState({seconds: 59})\n//       } else {\n//          this.setState({seconds: this.state.seconds - 1})\n//       }\n\n//     const rest = () => {\n          // if (this.state.work === true) return;\n          // else{\n          //   this.setState({minutes: 4})\n          //   this.setState({seconds: 59})\n          // if (this.state.seconds === 0) {\n            //  this.setState({minutes: this.state.minutes - 1})\n            //  this.setState({seconds: 59})\n            //} else {\n            //  this.setState({seconds: this.state.seconds - 1})\n          // } \n//      }"]},"metadata":{},"sourceType":"module"}