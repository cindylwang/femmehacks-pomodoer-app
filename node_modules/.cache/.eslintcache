[{"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/index.js":"1","/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/App.js":"2","/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/reportWebVitals.js":"3","/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js":"4","/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/ToDoList.js":"5","/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Collab.js":"6","/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Home/Home.js":"7","/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/useList.js":"8"},{"size":500,"mtime":1613692488014,"results":"9","hashOfConfig":"10"},{"size":715,"mtime":1613709647985,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1612627631356,"results":"12","hashOfConfig":"10"},{"size":2253,"mtime":1613622651038,"results":"13","hashOfConfig":"10"},{"size":2629,"mtime":1614278299016,"results":"14","hashOfConfig":"10"},{"size":653,"mtime":1614278011835,"results":"15","hashOfConfig":"10"},{"size":672,"mtime":1614277783823,"results":"16","hashOfConfig":"10"},{"size":3170,"mtime":1614222533925,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"xmwjft",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/index.js",[],["36","37"],"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/App.js",[],"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/reportWebVitals.js",[],"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Timer.js",[],"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/ToDoList.js",[],"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Collab.js",[],"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/Home/Home.js",[],"/Users/bubird/Documents/GitHub/femmehacks-pomodoer-app/src/useList.js",["38"],"import {useEffect, useRef, useState} from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_TASK_EVENT = 'newTaskItem';\nconst SOCKET_SERVER_URL = 'http://localhost:4000';\nconst STATUS_CHANGE = 'statusChange'\nconst CLEAR_COMPLETE = 'clearCompleteTasks'\n\nconst useList = (roomId) => {\n    const [tasks, setTasks] = useState([]);\n    const [statuses, setStatuses] = useState([]);\n    const socketRef = useRef();\n    \n\n    useEffect(()=> {\n\n        \n\n\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        // listens for incoming tasks\n        socketRef.current.on(NEW_TASK_EVENT, (task) => {\n            const incomingTask = {\n                ...task,\n                ownedByCurrentUser: task.senderId === socketRef.current.id\n            };\n\n            //adds task to tasks list, adds corresponding status to statuses\n            setTasks((tasks) => [...tasks, incomingTask])\n            const copy = [...statuses];\n            copy.push(false);\n            setStatuses((statuses) => [...statuses, false])\n\n        });\n\n        // listens for status changes\n        socketRef.current.on(STATUS_CHANGE, (data) => {\n            console.log('before', data.status)\n            const copy = [...data.status]\n            copy[data.index] = !copy[data.index];\n            setStatuses(copy);\n        })\n\n        // listens for clear \n        socketRef.current.on(CLEAR_COMPLETE, (data) => {\n            console.log('clear', data)\n            const indices = []\n            const statusesCopy = []\n            for (let i=0; i < data.status.length; i++) {\n                if (data.status[i] === true) {\n                    indices.push(i)\n                } else {\n                    statusesCopy.push(false)\n                }\n            }\n\n            setStatuses(statusesCopy)\n            // setCompleteIndices(indices)\n            console.log('indices',indices)\n            \n\n            // using indices to delete corresponding tasks\n            const copy = [...data.tasks]\n            console.log(data.tasks)\n            for (let i=indices.length-1; i>(-1);i--) {\n                copy.splice(indices[i],1)\n            }\n            setTasks(copy);\n\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //sends message to server that forwards to all users in room\n    const sendTask = (taskBody) => {\n        socketRef.current.emit(NEW_TASK_EVENT, {\n            body: taskBody,\n            senderId: socketRef.current.id,\n        });\n    }\n\n    //sends status change to server\n    const sendStatus = (index,statuses) => {\n        socketRef.current.emit(STATUS_CHANGE, {\n            index: index,\n            status: statuses,\n        })\n    }\n\n    //sends clear notif to server\n    const sendClear = (statuses,tasks) => {\n        socketRef.current.emit(CLEAR_COMPLETE, {\n            status: statuses,\n            tasks: tasks,\n        }) \n    }\n\n    return {tasks, sendTask, statuses, sendStatus, sendClear}\n}\n\nexport default useList",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":80,"column":8,"nodeType":"45","endLine":80,"endColumn":16,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'statuses'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [roomId, statuses]",{"range":"52","text":"53"},[2424,2432],"[roomId, statuses]"]